% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/wrapper.R
\name{predict.cnn}
\alias{predict.cnn}
\title{Predicting using a Convolutional Network Function}
\usage{
\method{predict}{cnn}(cnn, newdata)
}
\arguments{
\item{cnn}{A trained CNN.}

\item{newdata}{A matrix with data, one example per row.}
}
\description{
This function predicts a dataset using a trained CNN. Admits as parameters
the testing dataset, and a trained CNN. Returns a matrix of predicted
outputs.
}
\examples{
## Simple example
test_X <- array(c(1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0,
                  0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0),
                  c(6, 1, 2, 3));
results <- predict.cnn(cnn1, test_X);

## The MNIST example
data(mnist)

img_size <- c(28,28);

train <- mnist$train;
training_x <- array(train$x, c(nrow(train$x), 1, img_size)) / 255;
training_y <- binarization(train$y);

test <- mnist$test;
testing_x <- array(test$x, c(nrow(test$x), 1, img_size)) / 255;
testing_y <- binarization(test$y);

dataset <- training_x[1:1000,,,, drop=FALSE];
targets <- training_y[1:1000,, drop=FALSE];

newdata <- testing_x[1:1000,,,, drop=FALSE];

batch_size <- 10;
training_epochs <- 3;
learning_rate <- 1e-3;
momentum <- 0.8;
rand_seed <- 1234;
border_mode <- 2; # "SAME" mode
filter_size <- 5;
win_size <- 3;
stride <- 2;

layers <- list(
             c("CONV", 1, 4, filter_size, 0.1, border_mode, batch_size),
             c("POOL", 4, 0.1, batch_size, win_size, stride),
             c("RELU", 4, batch_size),
             c("CONV", 4, 16, filter_size, 0.1, border_mode, batch_size),
             c("POOL", 16, 0.1, batch_size, win_size, stride),
             c("RELU", 16, batch_size),
             c("FLAT", 16, batch_size),
             c("LINE", 784, 64, 0.1, batch_size),
             c("RELV", batch_size),
             c("LINE", 64, 10, 0.1, batch_size),
             c("SOFT", 10, batch_size)
);

mnist_cnn <- train.cnn(dataset, targets, layers, batch_size, training_epochs,
                       learning_rate, momentum, rand_seed);

prediction <- predict.cnn(mnist_cnn, newdata);
}
\keyword{CNN}
